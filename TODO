- Say no more cards left message if the deck is empty
- Save deck when leaving page
- Regenerate deck with more assets
- Implement a spaced repitition system
  - Look at fsrs4anki and understand their implementation
  - Adapt that implementation for our eeds
- Port the frontend over to web
- Authenticate users by emailing them a link instead of requiring a password
  - Make the frontend support email use the value from the .env file in the root directory of the project
- Improve the UI design
  - Better theme
  - Better icons
  - Better fonts
  - Add animations
- Add logging
  - Log each request and the different operations made, as well as any errors and the details surrounding them
  - Write to a recoverable log file
- Sometimes the grok api returns a 500 internal server error,
  in that case we should retry our request instead of making it seem like we failed
- Host the backend in the cloud and buy a domain name (at least 30$)
- Publish the app on the play store (at least 25$)

Maybe?
- Scrape flashcards from other sites and create a library of flashcards the user
  can practice from and extend
- Flashcards are defined in markdown, so let the user edit the markdown.
  Already using [this](https://github.com/Expensify/react-native-live-markdown) library
- Look into generating flashcards for math heavy subjects. Can we render latex nicely?
- Look into allow the model to generate diagrams in the flashcards
- Look into generating interactive Cloze deletion flashcards
- Handle powerpoint slides, word documents, and pdfs
- Allow users to export decks
- Allow users to share their decks with other users